package com.cejv456.jip.presentation;

import com.cejv456.jip.business.Common;
import com.cejv456.jip.dao.JipDAO;
import com.cejv456.jip.data.SurgicalBean;
import com.cejv456.jip.model.DBTableModel;
import com.cejv456.jip.services.JipService;
import com.cejv456.jip.util.SwingValidator;
import static com.cejv456.jip.business.Common.*;
import com.cejv456.jip.util.JTextFieldLimit;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Date;

/**
 * create surgical Panel
 *
 * @author Jianyu Feng
 */
public class SurgicalPanel extends javax.swing.JPanel implements JipPanel {

    //validator
    private SwingValidator sv;
    //search creteria
    private StringBuilder creteria;
    //surgical dao, db table model & service
    private JipDAO surgicalDAOImpl;
    private DBTableModel surgicalTableModel;
    private JipService surgicalService;
    //patient service
    private JipService patientService;
    //main frame
    private JipFrame jipFrame;
    //common icon
    private Common common;

    /**
     * Creates new form SurgicalPanel
     */
    public SurgicalPanel(JipService patientService, JipDAO surgicalDAOImpl, DBTableModel surgicalTableModel, JipFrame jipFrame) {
        sv = new SwingValidator();
        creteria = new StringBuilder();
        this.surgicalDAOImpl = surgicalDAOImpl;
        this.surgicalTableModel = surgicalTableModel;
        this.patientService = patientService;
        surgicalService = new JipService(surgicalDAOImpl, surgicalTableModel);
        this.jipFrame = jipFrame;
        common = new Common();

        initComponents();

        initTextFieldLimit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        surgicalBeanPanel = new javax.swing.JPanel();
        actionSurgicalButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        surgicalSuppliesTextField = new javax.swing.JTextField();
        surgeonFeeTextField = new javax.swing.JTextField();
        operatingRoomFeeTextField = new javax.swing.JTextField();
        surgicalProcedureTextField = new javax.swing.JTextField();
        surgicalPatientIDTextField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        surgicalPatientNameLabel = new javax.swing.JLabel();
        surgicalDateTextField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        surgicalTable = new javax.swing.JTable();

        setName("Surgical"); // NOI18N

        surgicalBeanPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Surgical"));
        surgicalBeanPanel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        surgicalBeanPanel.setName("Surgical"); // NOI18N
        surgicalBeanPanel.setPreferredSize(new java.awt.Dimension(597, 100));

        actionSurgicalButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        actionSurgicalButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/search.png"))); // NOI18N
        actionSurgicalButton.setText("Search");
        actionSurgicalButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        actionSurgicalButton.setMaximumSize(new java.awt.Dimension(80, 33));
        actionSurgicalButton.setMinimumSize(new java.awt.Dimension(80, 33));
        actionSurgicalButton.setPreferredSize(new java.awt.Dimension(80, 33));
        actionSurgicalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionSurgicalButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Patient ID");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel14.setText("Surgical Procedure");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel15.setText("Operating Room Fee");

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel20.setText("Surgeon Fee");

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel21.setText("Surgical Supplies Fee");

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel22.setText("Date");

        surgicalSuppliesTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        surgeonFeeTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        operatingRoomFeeTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        surgicalProcedureTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        surgicalProcedureTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surgicalProcedureTextFieldActionPerformed(evt);
            }
        });

        surgicalPatientIDTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        surgicalPatientIDTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                surgicalPatientIDTextFieldKeyReleased(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/surgical.png"))); // NOI18N
        jLabel17.setText("Surgical");
        jLabel17.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel17.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        surgicalPatientNameLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        javax.swing.GroupLayout surgicalBeanPanelLayout = new javax.swing.GroupLayout(surgicalBeanPanel);
        surgicalBeanPanel.setLayout(surgicalBeanPanelLayout);
        surgicalBeanPanelLayout.setHorizontalGroup(
            surgicalBeanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(surgicalBeanPanelLayout.createSequentialGroup()
                .addComponent(jLabel17)
                .addGap(0, 120, Short.MAX_VALUE))
            .addGroup(surgicalBeanPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(surgicalBeanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel20)
                    .addComponent(jLabel15)
                    .addComponent(jLabel21)
                    .addComponent(jLabel14)
                    .addComponent(jLabel22))
                .addGap(18, 18, 18)
                .addGroup(surgicalBeanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(surgicalBeanPanelLayout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(surgicalPatientNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(surgicalBeanPanelLayout.createSequentialGroup()
                        .addGroup(surgicalBeanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(actionSurgicalButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(surgicalPatientIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(surgicalProcedureTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(surgicalBeanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(operatingRoomFeeTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(surgeonFeeTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(surgicalSuppliesTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(surgicalDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        surgicalBeanPanelLayout.setVerticalGroup(
            surgicalBeanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(surgicalBeanPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(surgicalBeanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(surgicalPatientNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(surgicalBeanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(surgicalPatientIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(surgicalBeanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(surgicalProcedureTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(surgicalBeanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(operatingRoomFeeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(surgicalBeanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(surgeonFeeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(surgicalBeanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(surgicalSuppliesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(surgicalBeanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(surgicalDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(actionSurgicalButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel17))
        );

        surgicalTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        surgicalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SurgicalID", "PatientID", "SurgicalProcedure", "OperatingRoomFee", "SurgeonFee", "SurgicalSupplies", "Date"
            }
        ));
        surgicalTable.setToolTipText("Double click to update the selected the record");
        surgicalTable.setRowHeight(20);
        surgicalTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                surgicalTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(surgicalTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(surgicalBeanPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
            .addComponent(surgicalBeanPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void actionSurgicalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionSurgicalButtonActionPerformed

        SurgicalBean sb = new SurgicalBean();

        switch (actionSurgicalButton.getText()) {
            case "Add":
                if (sv.isLong(surgicalPatientIDTextField, "Patient ID")) {

                    sb.setPatientID(Long.valueOf(surgicalPatientIDTextField.getText().trim()));
                    sb.setSurgicalProcedure(surgicalProcedureTextField.getText().trim());

                    if (surgeonFeeTextField.getText().trim().length() > 0) {
                        if (sv.isDouble(surgeonFeeTextField, "Surgeon Fee")) {
                            sb.setSurgeonFee(new BigDecimal(surgeonFeeTextField.getText().trim()));
                        } else {
                            break;
                        }
                    }

                    if (operatingRoomFeeTextField.getText().trim().length() > 0) {
                        if (sv.isDouble(operatingRoomFeeTextField, "Operating Room Fee")) {
                            sb.setOperatingRoomFee(new BigDecimal(operatingRoomFeeTextField.getText().trim()));
                        } else {
                            break;
                        }
                    }

                    if (surgicalSuppliesTextField.getText().trim().length() > 0) {
                        if (sv.isDouble(surgicalSuppliesTextField, "Surgical Supplies")) {
                            sb.setSurgicalSuppliesFee(new BigDecimal(surgicalSuppliesTextField.getText().trim()));
                        } else {
                            break;
                        }
                    }

                    sb.setDate(new Timestamp(new Date().getTime()));

                    // insert new record
                    Long newID = surgicalService.insertRow(sb);

                    // update search creteria to allow the new record show up in the table
                    creteria.setLength(0);
                    creteria.append(" where patientID = ");
                    creteria.append(surgicalPatientIDTextField.getText().trim());

                    // refresh table
                    refreshTable(surgicalService, creteria, surgicalTable, surgicalTableModel);

                    //show message in status bar
                    jipFrame.showNotice(NEW_RECORD + " New Surgical ID: " + newID);
                }
                break;
            case "Update":
                if (sv.isLong(surgicalPatientIDTextField, "Patient ID") && (surgicalDateTextField.getText().trim().length() == 0 || sv.isFullTimestamp(surgicalDateTextField, "Date"))) {

                    sb.setSurgicalID(((SurgicalBean) surgicalTableModel.getData(surgicalTable.convertRowIndexToModel(surgicalTable.getSelectedRow()))).getSurgicalID());
                    sb.setPatientID(Long.valueOf(surgicalPatientIDTextField.getText().trim()));
                    sb.setSurgicalProcedure(surgicalProcedureTextField.getText().trim());

                    if (surgeonFeeTextField.getText().trim().length() > 0) {
                        if (sv.isDouble(surgeonFeeTextField, "Surgeon Fee")) {
                            sb.setSurgeonFee(new BigDecimal(surgeonFeeTextField.getText().trim()));
                        } else {
                            break;
                        }
                    }

                    if (operatingRoomFeeTextField.getText().trim().length() > 0) {
                        if (sv.isDouble(operatingRoomFeeTextField, "Operating Room Fee")) {
                            sb.setOperatingRoomFee(new BigDecimal(operatingRoomFeeTextField.getText().trim()));
                        } else {
                            break;
                        }
                    }

                    if (surgicalSuppliesTextField.getText().trim().length() > 0) {
                        if (sv.isDouble(surgicalSuppliesTextField, "Surgical Supplies")) {
                            sb.setSurgicalSuppliesFee(new BigDecimal(surgicalSuppliesTextField.getText().trim()));
                        } else {
                            break;
                        }
                    }

                    if (surgicalDateTextField.getText().trim().length() > 0) {
                        sb.setDate(Timestamp.valueOf(surgicalDateTextField.getText().trim().replaceAll("/", "-")));
                    }

                    // update record
                    surgicalService.updateRow(sb);

                    creteria.setLength(0);
                    creteria.append(" where SurgicalID = ").append(sb.getSurgicalID());

                    // refresh table
                    refreshTable(surgicalService, creteria, surgicalTable, surgicalTableModel);

                    //show message in status bar
                    jipFrame.showNotice(UPDATE_RECORD + " Surgical ID: " + sb.getSurgicalID());

                    // switch to Search view
                    searchBeanPanel();
                }
                break;
            case "Search":

                // empty search creteria
                creteria.setLength(0);

                if (surgicalPatientIDTextField.getText().trim().length() > 0 && sv.isLong(surgicalPatientIDTextField, "Patient ID")) {
                    creteria.append(" and patientID = ");
                    creteria.append(surgicalPatientIDTextField.getText().trim());
                }

                if (surgicalProcedureTextField.getText().trim().length() > 0) {
                    creteria.append(" and SurgicalProcedure like '%");
                    creteria.append(surgicalProcedureTextField.getText().trim().replaceAll("'", "''"));
                    creteria.append("%'");
                }

                if (operatingRoomFeeTextField.getText().trim().length() > 0) {
                    creteria.append(" and OperatingRoomFee =");
                    creteria.append(operatingRoomFeeTextField.getText().trim());
                }

                if (surgeonFeeTextField.getText().trim().length() > 0) {
                    creteria.append(" and SurgeonFee =");
                    creteria.append(surgeonFeeTextField.getText().trim());
                }

                if (surgicalSuppliesTextField.getText().trim().length() > 0) {
                    creteria.append(" and SurgicalSupplies =");
                    creteria.append(surgicalSuppliesTextField.getText().trim());
                }

                if (surgicalDateTextField.getText().trim().length() > 0 && sv.isTimestamp(surgicalDateTextField, "Date")) {
                    creteria.append(" and Date >= '");
                    creteria.append(surgicalDateTextField.getText().trim().substring(0, 10));
                    creteria.append(" 00:00:00'");
                    creteria.append(" and Date <= '");
                    creteria.append(surgicalDateTextField.getText().trim().substring(0, 10));
                    creteria.append(" 23:59:59'");

                    surgicalDateTextField.setText(surgicalDateTextField.getText().trim().substring(0, 10));
                }

                if (creteria.toString().length() > 0) {
                    creteria.insert(0, " where 1 = 1 ");
                }

                // refresh table
                refreshTable(surgicalService, creteria, surgicalTable, surgicalTableModel);

                //show message in status bar
                jipFrame.showNotice(surgicalTable.getRowCount() + " " + SEARCH_RECORD);

        }
    }//GEN-LAST:event_actionSurgicalButtonActionPerformed

    private void surgicalProcedureTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surgicalProcedureTextFieldActionPerformed
    }//GEN-LAST:event_surgicalProcedureTextFieldActionPerformed

    private void surgicalPatientIDTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_surgicalPatientIDTextFieldKeyReleased
        showPatientName(patientService, surgicalPatientIDTextField, surgicalPatientNameLabel);
    }//GEN-LAST:event_surgicalPatientIDTextFieldKeyReleased

    private void surgicalTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_surgicalTableMouseClicked
        // double click event
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();

            updateBeanPanel();
        }
    }//GEN-LAST:event_surgicalTableMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actionSurgicalButton;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField operatingRoomFeeTextField;
    private javax.swing.JTextField surgeonFeeTextField;
    private javax.swing.JPanel surgicalBeanPanel;
    private javax.swing.JTextField surgicalDateTextField;
    private javax.swing.JTextField surgicalPatientIDTextField;
    private javax.swing.JLabel surgicalPatientNameLabel;
    private javax.swing.JTextField surgicalProcedureTextField;
    private javax.swing.JTextField surgicalSuppliesTextField;
    private javax.swing.JTable surgicalTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public void toggleDateTextFields(boolean b) {
        surgicalDateTextField.setEditable(b);
        surgicalDateTextField.setEnabled(b);
    }

    /**
     * clear form fields in bean panel
     *
     */
    @Override
    public void clearFormFields() {
        surgicalPatientIDTextField.setText("");
        surgicalPatientNameLabel.setText("");
        surgicalProcedureTextField.setText("");
        operatingRoomFeeTextField.setText("");
        surgeonFeeTextField.setText("");
        surgicalSuppliesTextField.setText("");
        surgicalDateTextField.setText("");
    }

    @Override
    public void deleteBean() {
        SurgicalBean sb = ((SurgicalBean) surgicalTableModel.getData(surgicalTable.convertRowIndexToModel(surgicalTable.getSelectedRow())));

        Long result = surgicalService.deleteRow(surgicalTable.convertRowIndexToModel(surgicalTable.getSelectedRow()));

        if (result >= 0) {
            //show message in status bar
            jipFrame.showNotice(DELETE_RECORD + " Surgical ID: " + sb.getSurgicalID());
        }
    }

    @Override
    public void addBeanPanel() {
        //load bean panel
        loadBeanPanelAction(surgicalBeanPanel, actionSurgicalButton, "Add", "Surgical", common.getIcon("Add"));

        // activate ID Text Fields
        surgicalPatientIDTextField.setEditable(true);

        //clear form fields
        clearFormFields();

        // enable date text fields
        toggleDateTextFields(false);
    }

    @Override
    public void searchBeanPanel() {
        //load bean panel
        loadBeanPanelAction(surgicalBeanPanel, actionSurgicalButton, "Search", "Surgical", common.getIcon("Search"));

        // activate ID Text Fields
        surgicalPatientIDTextField.setEditable(true);

        //clear form fields
        clearFormFields();

        // enable date text fields
        toggleDateTextFields(true);
    }

    @Override
    public void updateBeanPanel() {
        if (checkSelectedRow(surgicalTable)) {
            loadBeanPanelAction(surgicalBeanPanel, actionSurgicalButton, "Update", "Surgical", common.getIcon("Update"));

            // load surgicalbean to the form fields
            SurgicalBean sb = (SurgicalBean) surgicalTableModel.getData(surgicalTable.convertRowIndexToModel(surgicalTable.getSelectedRow()));
            surgicalPatientIDTextField.setText(sb.getPatientID() + "");
            surgicalProcedureTextField.setText(sb.getSurgicalProcedure());

            operatingRoomFeeTextField.setText((sb.getOperatingRoomFee() == null) ? "" : sb.getOperatingRoomFee().toString());
            surgeonFeeTextField.setText((sb.getSurgeonFee() == null) ? "" : sb.getSurgeonFee().toString());
            surgicalSuppliesTextField.setText((sb.getSurgicalSuppliesFee() == null) ? "" : sb.getSurgicalSuppliesFee().toString());

            surgicalDateTextField.setText((sb.getDate() == null) ? "" : sb.getDate().toString().substring(0, 19).substring(0, 19));

            // enable date text fields
            toggleDateTextFields(true);

            // disable ID text fields
            surgicalPatientIDTextField.setEditable(false);

            // show patient name
            showPatientName(patientService, surgicalPatientIDTextField, surgicalPatientNameLabel);
        }
    }

    @Override
    public void loadPatientDetails(Long patientID, String patientName) {
        //switch to search view
        searchBeanPanel();

        //show patient id & name
        surgicalPatientIDTextField.setText(patientID + "");
        surgicalPatientNameLabel.setText(patientName);

        //click search action button
        actionSurgicalButtonActionPerformed(null);

        loadBeanPanelAction(surgicalBeanPanel, actionSurgicalButton, "Add", "Surgical", common.getIcon("Add"));

        // disable date text field, as we will use current datetime as input
        toggleDateTextFields(false);
    }

    @Override
    public void print() {
        printTable("Surgical List", surgicalTable);
    }

    /**
     * set the maximum length of all text fields
     *
     */
    private void initTextFieldLimit() {
        //surgical panel
        surgicalPatientIDTextField.setDocument(new JTextFieldLimit(11));
        surgicalProcedureTextField.setDocument(new JTextFieldLimit(256));
        operatingRoomFeeTextField.setDocument(new JTextFieldLimit(16));
        surgeonFeeTextField.setDocument(new JTextFieldLimit(16));
        surgicalSuppliesTextField.setDocument(new JTextFieldLimit(16));
        surgicalDateTextField.setDocument(new JTextFieldLimit(19));

    }
}
